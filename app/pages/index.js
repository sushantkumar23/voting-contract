import { useState, useEffect } from "react"
import { Connection, PublicKey } from "@solana/web3.js"
import { useWallet } from "@solana/wallet-adapter-react"
import { Program, Provider, web3 } from "@project-serum/anchor"
import idl from "../src/idl.json"
import Head from "next/head"

export default function Home() {
  const programId = new PublicKey(idl.metadata.address)
  const network = "http://localhost:8899"
  const preflightCommitment = "processed"
  const [voteAccount, setVoteAccount] = useState(null)
  const [votes, setVotes] = useState({
    crunchy: null,
    smooth: null,
  })
  const wallet = useWallet()

  useEffect(() => {
    fetch("api/votes")
      .then((response) => response.json())
      .then((data) => {
        const accountArray = Object.values(data.voteAccount._keypair.secretKey)
        const secret = new Uint8Array(accountArray)
        const kp = web3.Keypair.fromSecretKey(secret)
        setVoteAccount(kp)
      })
      .catch((error) => {
        console.log(error)
      })
  }, [])

  async function getVotes() {
    const provider = await getProvider()
    const program = new Program(idl, programId, provider)
    try {
      const account = await program.account.voteAccount.fetch(
        voteAccount.publicKey
      )
      setVotes({
        crunchy: parseInt(account.crunchy.toString()),
        smooth: parseInt(account.smooth.toString()),
      })
    } catch (error) {
      console.error("❌ Could not get votes: ", error.toString())
    }
  }

  useEffect(() => {
    if (!!voteAccount) {
      console.log("voteAccount is not null")
      getVotes()
    }
  }, [voteAccount])

  async function getProvider() {
    const connection = new Connection(network, preflightCommitment)
    const provider = new Provider(connection, wallet, preflightCommitment)
    return provider
  }

  async function handleVote(side) {
    const provider = await getProvider()
    const program = new Program(idl, programId, provider)
    if (side === "crunchy") {
      console.log("Starting transaction for crunchy")
      const tx = await program.rpc.voteCrunchy({
        accounts: {
          voteAccount: voteAccount.publicKey,
        },
      })
    }
    if (side === "smooth") {
      console.log("Starting transaction for smooth")
      const tx = await program.rpc.voteSmooth({
        accounts: {
          voteAccount: voteAccount.publicKey,
        },
      })
    }
    getVotes()
  }

  async function intializeVoting() {
    const provider = await getProvider()
    const program = new Program(idl, programId, provider)
    console.log("program.programId: ", program.programId)
    try {
      await program.rpc.initialize({
        accounts: {
          voteAccount: voteAccount.publicKey,
          user: provider.wallet.publicKey,
          systemProgram: web3.SystemProgram.programId,
        },
        signers: [voteAccount],
      })
    } catch (error) {
      console.error("❌ Transaction error: ", error.toString())
    } finally {
      await getVotes()
    }
  }

  return (
    <div className="h-screen">
      <Head>
        <title>Solana Voting Contract</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="grid space-y-4 place-content-center h-screen">
        <div>
          <h1 className="font-bold text-2xl mb-2">Voting Contract</h1>
          <p>Smooth Peanut Butter vs Crunchy Peanut Butter</p>
        </div>
        <button className="bg-indigo-700 text-gray-50 rounded px-5 py-2">
          Connect Wallet
        </button>
        {votes.crunchy === null ? (
          <button
            className="bg-indigo-700 text-gray-50 rounded px-5 py-2"
            onClick={intializeVoting}
          >
            Initialize Account
          </button>
        ) : null}
        <div className="flex justify-between">
          <div>
            <p className="font-bold text-4xl mb-4">{votes.crunchy}</p>
            <button
              className="bg-indigo-700 text-gray-50 rounded px-5 py-2"
              onClick={() => handleVote("crunchy")}
            >
              Vote Crunchy
            </button>
          </div>
          <div>
            <p className="font-bold text-4xl mb-4">{votes.smooth}</p>
            <button
              className="bg-indigo-700 text-gray-50 rounded px-5 py-2"
              onClick={() => handleVote("smooth")}
            >
              Vote Smooth
            </button>
          </div>
        </div>
      </main>
    </div>
  )
}
